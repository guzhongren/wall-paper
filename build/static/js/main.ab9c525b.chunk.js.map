{"version":3,"sources":["utils/mm2px.ts","components/Exporter/exporterSlice.ts","components/Template/index.tsx","components/Exporter/index.tsx","containers/WallPaper/index.tsx","serviceWorker.ts","containers/WallPaper/mapSlice.ts","store.ts","index.tsx"],"names":["mm2px","mm","window","devicePixelRatio","initModel","name","width","innerWidth","height","innerHeight","initialState","currentMod","resolution","currentDirection","directions","currentModel","models","exporterSlice","createSlice","reducers","changeWidth","state","action","payload","changeHeight","changeResolution","changeCurrentModel","changeCurrentDirection","actions","Option","Select","Template","dispatch","useDispatch","Form","useForm","form","useSelector","exporter","layout","Item","label","defaultValue","onChange","value","map","model","index","key","direction","htmlFor","id","placeholder","evt","parseFloat","target","TabPane","Tabs","Exporter","className","title","bordered","defaultActiveKey","tab","type","block","onClick","png","mapInstance","getCanvas","toDataURL","href","download","WallPaper","useState","setHeight","setWidth","mapRef","useRef","find","useEffect","mapboxgl","accessToken","Map","container","style","center","zoom","preserveDrawingBuffer","Fragment","ref","Boolean","location","hostname","match","mapSlice","instance","createMap","produce","draft","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","exporterReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab9c525b.chunk.js","sourcesContent":["export const mm2px = (mm: number) => {\n  const dpi = window.devicePixelRatio * 96\n  return mm / 25.4 * dpi\n}","import { createSlice } from '@reduxjs/toolkit'\n\nconst initModel = {\n  name: 'PC',\n  width: window.innerWidth,\n  height: window.innerHeight,\n}\n\nexport const initialState = {\n  currentMod: 'template',\n  width: initModel.width,\n  height: initModel.height,\n  resolution: window.devicePixelRatio,\n  currentDirection: 'vertical',\n  directions: [\n    \"vertical\",\n    'horizon'\n  ],\n  currentModel: initModel.name,\n  models: [\n    initModel,\n    {\n      name: 'iPhone 11',\n      width: 71.4,\n      height: 144.0,\n    },\n    {\n      name: 'iPhone 11 Pro Max',\n      width: 77.8,\n      height: 158.0\n    }\n  ]\n}\n\nconst exporterSlice = createSlice({\n  name: 'exporter',\n  initialState,\n  reducers: {\n    changeWidth(state, action) {\n      const { width } = action.payload;\n        state.width = width\n    },\n    changeHeight(state, action) {\n      const { height } = action.payload;\n        state.height = height\n    },\n    changeResolution(state, action) {\n      const { resolution } = action.payload;\n        state.resolution = resolution\n    },\n    changeCurrentModel(state, action) {\n      const { currentModel } = action.payload;\n        state.currentModel = currentModel\n    },\n    changeCurrentDirection(state, action) {\n      const { currentDirection } = action.payload;\n        state.currentDirection = currentDirection\n    },\n  },\n})\n\nexport interface IRootState {\n  exporter: typeof initialState,\n}\nexport const { changeHeight, changeWidth, changeResolution, changeCurrentModel, changeCurrentDirection } = exporterSlice.actions\n\nexport default exporterSlice.reducer\n","import React from 'react';\nimport { Form, Input, Select } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { IRootState, changeResolution, changeCurrentModel,changeCurrentDirection } from '../Exporter/exporterSlice'\n\nconst { Option } = Select\n\n\n\nconst Template = () => {\n  const dispatch = useDispatch()\n  const [form] = Form.useForm();\n\n  const { directions, models, currentDirection, currentModel, resolution } = useSelector((state: IRootState) => state.exporter)\n\n  const changeResolutionHandler = (evt: any) => {\n    dispatch(changeResolution({ resolution: parseFloat(evt.target.value) }))\n  }\n  const changeModelHandler = (value: string) => {\n    dispatch(changeCurrentModel({currentModel: value}))\n  }\n  const changeCurrentDirectionHandler = (value: string) => {\n    dispatch(changeCurrentDirection({currentDirection: value}))\n  }\n\n  return (\n    <>\n      <Form\n        layout={'vertical'}\n        form={form}\n      >\n        <Form.Item label=\"机型\">\n          <Select defaultValue={`${currentModel}`} onChange={changeModelHandler}>\n            {models.map((model, index) => (\n              <Option key={index} value={model.name}>{model.name}</Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item label=\"方向\">\n          <Select defaultValue={`${currentDirection}`} onChange={changeCurrentDirectionHandler}>\n            {directions.map((direction, index) => (\n              <Option key={index} value={`${direction}`}>{direction}</Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item label=\"分辨率\" htmlFor='resolution'>\n          <Input id='resolution' placeholder=\"input placeholder\" value={resolution} onChange={changeResolutionHandler} />\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default Template;","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport { Card, Tabs, Button } from 'antd'\nimport './index.scss'\n\nimport Template from '../Template'\n\nconst { TabPane } = Tabs;\n\nconst Exporter = () => {\n\n\n  function downloadWallPaper (evt: any){\n   const png = window.mapInstance.getCanvas().toDataURL('image/png')\n   evt.target.href = png\n  }\n  return (\n    <div className={'exporter'}>\n      <Card title=\"导出设置\" bordered={false}>\n        <Tabs defaultActiveKey=\"1\" onChange={() => { }} className={'tabContainer'}>\n          <TabPane tab=\"模板\" key=\"1\">\n            <Template />\n          </TabPane>\n          <TabPane tab=\"自定义\" key=\"2\">\n            Content of Tab Pane 2\n          </TabPane>\n        </Tabs>\n        <Button type=\"primary\" block onClick={downloadWallPaper}><a href='' download='map.png'>Download ↓</a></Button>\n      </Card>\n    </div>\n  );\n}\n\nexport default Exporter;\n","import React, {useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux'\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl.js';\nimport {mm2px} from '../../utils/mm2px'\n\nimport './index.scss';\n\nimport Exporter from '../../components/Exporter'\nimport { IRootState } from '../../components/Exporter/exporterSlice'\n\ndeclare global {\n  interface Window {\n    mapInstance: any\n  }\n}\n\nfunction WallPaper() {\n  const [height, setHeight] = useState(0)\n  const [width, setWidth] = useState(0)\n  let mapRef = useRef<HTMLDivElement>(null)\n  const {currentModel} = useSelector((state: IRootState) => state.exporter)\n  \n  const model = useSelector((state: IRootState) => state.exporter.models.find(model => model.name === currentModel))\n  \n  useEffect(() => {\n    setHeight(mm2px(model?.height || 0))\n    setWidth(mm2px(model?.width|| 0))\n  }, [currentModel, model])\n\n  useEffect(() => {\n    mapboxgl.accessToken = 'pk.eyJ1IjoiZ3V6aG9uZ3JlbiIsImEiOiJjajh0Z3ZvNXowbHF6MzNxenpoaTlqZnh0In0.UjqQlTKebjUEfWD6ZlVV7g'\n    const mapInstance = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/guzhongren/ck9qomecy5v3z1is8k9cynq6r',\n      center: [104.757, 35.116],\n      zoom: 1,\n      preserveDrawingBuffer: true\n    })\n    window.mapInstance = mapInstance\n  }, [])\n\n\n\n  return (\n    <React.Fragment>\n      <div id='map' ref={mapRef} className='map' style={{width: `${width}px`, height: `${height}px`}}>\n      </div>\n\n      <Exporter />\n    </React.Fragment>\n  );\n}\n\nexport default WallPaper;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport { createSlice } from '@reduxjs/toolkit'\nimport produce from \"immer\"\n\nexport const initialState = {\n  instance: null,\n}\n\nconst mapSlice = createSlice({\n  name: 'map',\n  initialState,\n  reducers: {\n    createMap(state, action) {\n      const { map } = action.payload\n      return produce(state, draft => {\n        draft.instance = map\n      })\n    },\n  },\n})\n\nexport const { createMap } = mapSlice.actions\n\nexport default mapSlice.reducer\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from 'redux-logger'\nimport exporterReducer from './components/Exporter/exporterSlice'\nimport mapSlice from './containers/WallPaper/mapSlice'\n\n\n\nconst middleware = [...getDefaultMiddleware(), logger]\n\n const store = configureStore({\n   reducer: {\n     exporter: exporterReducer,\n     map: mapSlice\n   },\n   middleware,\n});\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.scss';\n// import App from './components/App/App';\nimport WallPaper from './containers/WallPaper'\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <WallPaper />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}